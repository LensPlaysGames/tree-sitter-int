<file> ::= { <expression> }

<statement>  ::= <stmt-ext>
               | <stmt-func>
               | <stmt-decl>
               | <expression>
               | <comment>

<comment> ::= ";" {";"} <anything> ["\r"] "\n"

<stmt-func> ::= <decl-start> <expr-lambda>
<stmt-ext>  ::= <decl-start> "ext" <type-function>

/// TODO: only allow function type when `=` is present for conflict
/// reduction. Not perfect.
<stmt-decl> ::= <decl-start> <type> [ "=" <expression> ]

<expression> ::= <expr-block>
               | <expr-call>
               | <expr-subs>
               | <expr-if>
               | <expr-prefix>
               | <expr-binary>
               | <expr-primary>

<expr-block>   ::= "{" { <expression> } "}"
<expr-if>      ::= "if" <expression> <expr-block> [ "else" <expr-block> ]
<expr-call>    ::= <expression> "(" [ <expression> { "," <expression> } ] ")"
<expr-lambda>  ::= <type-function> <expr-block>
<expr-subs>    ::= <expression> "[" <expression> "]"
<expr-prefix>  ::= <prefix> <expression>
<expr-binary>  ::= <expression> <binary> <expression>
<expr-primary> ::= NUMBER | IDENTIFIER

<decl-start> ::= IDENTIFIER ":"

<type>           ::= <decl-type>
                   | <type-function>

<decl-type>      ::= <type-primitive>
                   | <type-pointer>
                   | <type-array>

<type-primitive> ::= "integer" | "byte"
<type-pointer>   ::= "@" <type>
<type-array>     ::= <type> [ "[" <expression> "]" ]
<type-function>  ::= <type> "(" [ <decl-start> <type> { "," <decl-start> <type>  } ] ")"

<prefix> ::= /// All unary prefix operators
<binary> ::= /// All binary operators
